{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","name","twitterHandle","comment","form","setForm","forum","setForum","useEffect","a","async","axios","get","process","items","data","fetchData","handleFormChange","e","target","value","className","alt","src","class","href","length","map","item","key","dangerouslySetInnerHTML","__html","onSubmit","preventDefault","post","htmlFor","id","type","onChange","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.665d8bc4.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\n\nfunction App() {\n  const [form, setForm] = useState(\n    {name: '', twitterHandle: '', comment: ''}\n  );\n\n  const [forum, setForum] = useState([]);\n\n  useEffect(() => {\n    async function fetchData() {\n      const items = await axios.get(`${process.env.REACT_APP_API_LOCATION}/items`);\n      setForum(items.data)\n    }\n\n    fetchData();\n  }, [])\n\n  const handleFormChange = (e) => {\n    setForm({...form, [e.target.name]: e.target.value});\n  }\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    const item = await axios.post(`${process.env.REACT_APP_API_LOCATION}/items`, form);\n    setForum([...forum, item.data]);\n    setForm({name: '', twitterHandle: '', comment: ''});\n  }\n\n  const handleDelete = async (e, id) => {\n    e.preventDefault();\n    await axios.delete(`${process.env.REACT_APP_API_LOCATION}/items/${id}`);\n    const newForum = forum.filter(item => item._id !== id);\n    setForum(newForum);\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"toolbar\">\n        <img alt=\"ReactConf\" src=\"./logo.svg\" className=\"toolbar--logo\" />\n        <ul className=\"toolbar--nav\">\n          <li className=\"toolbar--nav-item\">FORUM</li>\n        </ul>\n      </header>\n      <div class=\"container\">\n        <img alt=\"ReactConf\" src=\"./logo--on-white.svg\" className=\"logo\" />\n        <ul className=\"forum\">\n          <li className=\"form__item\">\n            <div className=\"form__item-profile\">\n              <img src=\"./carmen-profile.jpg\" alt=\"Carmen Chung\" className=\"form__item-profile-picture\" />\n              <a href=\"https://twitter.com/carmenhchung?lang=en\" target=\"_blank\" className=\"form__item-profile-name\">Carmen</a>\n            </div>\n            <div className=\"form__item-comment\">\n              <p>\n                \"Loved talking about XSS attacks at the conference. Thanks for having me, ReactConf AU!\"\n              </p>\n            </div>\n          </li>\n          <li className=\"form__item\">\n            <div className=\"form__item-profile\">\n              <img src=\"./sachi-profile.jpg\" alt=\"Sachi Dog\" className=\"form__item-profile-picture\" />\n              <a href=\"https://twitter.com/carmenhchung?lang=en\" target=\"_blank\" className=\"form__item-profile-name\">Sachi</a>\n            </div>\n            <div className=\"form__item-comment\">\n              <p>\n                \"Where was my invite?\"\n              </p>\n            </div>\n          </li>\n          {\n            forum && forum.length && forum.map(item =>\n              <li className=\"form__item\" key={item.comment}>\n                <div className=\"form__item-profile\">\n                  <img src=\"./anon.png\" alt=\"Anon\" className=\"form__item-profile-picture\" />\n                  <a href={item.twitterHandle} target=\"_blank\" className=\"form__item-profile-name\">{item.name}</a>\n                </div>\n                <div className=\"form__item-comment\">\n                  <p dangerouslySetInnerHTML={{__html: item.comment}}></p>\n                </div>\n              </li>\n            )\n          }\n        </ul>\n        <div className=\"comment-form\">\n          <h2 className=\"comment-form__heading\">Comment:</h2>\n          <form className=\"comment-form__form\" onSubmit={handleSubmit}>\n            <div className=\"comment-form__field\">\n              <label htmlFor=\"name\" className=\"comment-form__label\">Name:</label>\n              <input\n                id=\"name\"\n                type=\"text\"\n                name=\"name\"\n                className=\"comment-form__input\"\n                value={form.name}\n                onChange={handleFormChange}\n              />\n            </div>\n            <div className=\"comment-form__field\">\n              <label htmlFor=\"twitterHandle\" className=\"comment-form__label\">Twitter Handle:</label>\n              <input\n                id=\"twitter\"\n                type=\"text\"\n                name=\"twitterHandle\"\n                className=\"comment-form__input\"\n                value={form.twitterHandle}\n                onChange={handleFormChange}\n              />\n            </div>\n            <div className=\"comment-form__field\">\n              <label htmlFor=\"comment\" className=\"comment-form__label\">Comment:</label>\n              <textarea\n                id=\"comment\"\n                name=\"comment\"\n                className=\"comment-form__input\"\n                value={form.comment}\n                onChange={handleFormChange}\n              ></textarea>\n            </div>\n            <button id=\"submit-btn\" className=\"comment-form__button\" type=\"submit\">SUBMIT</button>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}