{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","name","twitterHandle","comment","form","setForm","forum","setForum","useEffect","a","async","axios","get","process","items","data","fetchData","handleFormChange","e","target","value","className","length","map","item","key","style","display","justifyContent","href","dangerouslySetInnerHTML","__html","onClick","id","preventDefault","delete","newForum","filter","_id","handleDelete","onSubmit","post","htmlFor","type","onChange","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iTAwFeA,MApFf,WAAgB,IAAD,EACWC,mBACtB,CAACC,KAAM,GAAIC,cAAe,GAAIC,QAAS,KAF5B,mBACNC,EADM,KACAC,EADA,OAKaL,mBAAS,IALtB,mBAKNM,EALM,KAKCC,EALD,KAObC,qBAAU,YACR,mBAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACsBE,IAAMC,IAAN,UAAaC,yCAAb,YADtB,OACQC,EADR,OAEEP,EAASO,EAAMC,MAFjB,qCAKAC,KACC,IAEH,IAAMC,EAAmB,SAACC,GACxBb,EAAQ,eAAID,EAAL,eAAYc,EAAEC,OAAOlB,KAAOiB,EAAEC,OAAOC,UAiB9C,OACE,yBAAKC,UAAU,OACb,iDACA,4BAEIf,GAASA,EAAMgB,QAAUhB,EAAMiB,KAAI,SAAAC,GAAI,OACrC,wBAAIC,IAAKD,EAAKrB,SACZ,yBAAKuB,MAAO,CAACC,QAAS,OAAQC,eAAgB,iBAC5C,2BAAIJ,EAAKvB,MACT,uBAAG4B,KAAML,EAAKtB,cAAeiB,OAAO,UAApC,WACA,uBAAGW,wBAAyB,CAACC,OAAQP,EAAKrB,WAC1C,4BAAQ6B,QAAS,SAACd,GAAD,OAlBV,SAAOA,EAAGe,GAAV,eAAAxB,EAAAC,OAAA,uDACnBQ,EAAEgB,iBADiB,WAAAzB,EAAA,MAEbE,IAAMwB,OAAN,UAAgBtB,yCAAhB,kBAA4DoB,KAF/C,OAGbG,EAAW9B,EAAM+B,QAAO,SAAAb,GAAI,OAAIA,EAAKc,MAAQL,KACnD1B,EAAS6B,GAJU,qCAkBiBG,CAAarB,EAAGM,EAAKc,OAA7C,mBAMV,6BACE,0BAAME,SAhCS,SAAOtB,GAAP,eAAAT,EAAAC,OAAA,uDACnBQ,EAAEgB,iBADiB,WAAAzB,EAAA,MAEAE,IAAM8B,KAAN,UAAc5B,yCAAd,UAA0DT,IAF1D,OAEboB,EAFa,OAGnBjB,EAAS,GAAD,mBAAKD,GAAL,CAAYkB,EAAKT,QACzBV,EAAQ,CAACJ,KAAM,GAAIC,cAAe,GAAIC,QAAS,KAJ5B,uCAiCb,2BAAOuC,QAAQ,QAAf,QACA,2BACET,GAAG,OACHU,KAAK,OACL1C,KAAK,OACLmB,MAAOhB,EAAKH,KACZ2C,SAAU3B,IAEZ,2BAAOyB,QAAQ,iBAAf,kBACA,2BACET,GAAG,UACHU,KAAK,OACL1C,KAAK,gBACLmB,MAAOhB,EAAKF,cACZ0C,SAAU3B,IAEZ,2BAAOyB,QAAQ,WAAf,WACA,2BACET,GAAG,UACHU,KAAK,OACL1C,KAAK,UACLmB,MAAOhB,EAAKD,QACZyC,SAAU3B,IAEZ,4BAAQgB,GAAG,aAAaU,KAAK,UAA7B,cCrEUE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2df0c675.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\n\nfunction App() {\n  const [form, setForm] = useState(\n    {name: '', twitterHandle: '', comment: ''}\n  );\n\n  const [forum, setForum] = useState([]);\n\n  useEffect(() => {\n    async function fetchData() {\n      const items = await axios.get(`${process.env.REACT_APP_API_LOCATION}/items`);\n      setForum(items.data)\n    }\n\n    fetchData();\n  }, [])\n\n  const handleFormChange = (e) => {\n    setForm({...form, [e.target.name]: e.target.value});\n  }\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    const item = await axios.post(`${process.env.REACT_APP_API_LOCATION}/items`, form);\n    setForum([...forum, item.data]);\n    setForm({name: '', twitterHandle: '', comment: ''});\n  }\n\n  const handleDelete = async (e, id) => {\n    e.preventDefault();\n    await axios.delete(`${process.env.REACT_APP_API_LOCATION}/items/${id}`);\n    const newForum = forum.filter(item => item._id !== id);\n    setForum(newForum);\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>ReactConf AU 2020</h1>\n      <ul>\n        {\n          forum && forum.length && forum.map(item =>\n            <li key={item.comment}>\n              <div style={{display: 'flex', justifyContent: 'space-evenly'}}>\n                <p>{item.name}</p>\n                <a href={item.twitterHandle} target=\"_blank\">Twitter</a>\n                <p dangerouslySetInnerHTML={{__html: item.comment}}></p>\n                <button onClick={(e) => handleDelete(e, item._id)}>Delete me</button>\n              </div>\n            </li>\n          )\n        }\n      </ul>\n      <div>\n        <form onSubmit={handleSubmit}>\n          <label htmlFor=\"name\">Name</label>\n          <input\n            id=\"name\"\n            type=\"text\"\n            name=\"name\"\n            value={form.name}\n            onChange={handleFormChange}\n          />\n          <label htmlFor=\"twitterHandle\">Twitter Handle</label>\n          <input\n            id=\"twitter\"\n            type=\"text\"\n            name=\"twitterHandle\"\n            value={form.twitterHandle}\n            onChange={handleFormChange}\n          />\n          <label htmlFor=\"comment\">Comment</label>\n          <input\n            id=\"comment\"\n            type=\"text\"\n            name=\"comment\"\n            value={form.comment}\n            onChange={handleFormChange}\n          />\n          <button id=\"submit-btn\" type=\"submit\">SUBMIT</button>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}